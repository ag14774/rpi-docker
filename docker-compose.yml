version: "2.4"

volumes:
  files:
    driver: local
    driver_opts:
      type: volume
      device: ${DATA_PATH}/files
      o: bind
  mysql:
    driver: local
    driver_opts:
      type: volume
      device: ${DATA_PATH}/mysql
      o: bind
  redis:
    driver: local
    driver_opts:
      type: volume
      device: ${DATA_PATH}/redis
      o: bind
  jellyfin_config:
    driver: local
    driver_opts:
      type: volume
      device: ${DATA_PATH}/jellyfin_config
      o: bind
  backup:
    driver: local
    driver_opts:
      type: volume
      device: ${LOCAL_BACKUP_PATH}
      o: bind
  owncloud_webdav:
    driver: rclone
    driver_opts:
      type: webdav
      webdav-url: ${WEBDAV_URL}
      webdav-vendor: owncloud
      webdav-user: ${WEBDAV_USER}
      webdav-pass: ${WEBDAV_PASS}
      vfs_cache_mode: writes
      allow_other: 'true'

networks:
  ipv4_net:
    enable_ipv6: false
    ipam:
      driver: default
      config:
        - subnet: "172.18.0.0/24"
  ipv6_net:
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: "172.19.0.0/24"
        - subnet: "fd00:dead:beef:1000::/64"

services:
  reverse-proxy:
    # The official v2 Traefik docker image
    build:
      context: ./traefik
      dockerfile: Dockerfile
      args:
        traefik_email: ${TRAEFIK_EMAIL}
    networks:
      - ipv4_net
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - "--configFile=/traefik.toml"
    restart: always
    ports:
      # The HTTP port
      - "80:80"
      # The HTTPS port
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      #- "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/acme.json:/acme.json
    labels:
      - "traefik.enable=false"

  owncloud:
    build:
      context: ./owncloud
      dockerfile: Dockerfile
      args:
        owncloud_version: ${OWNCLOUD_VERSION}
    image: owncloud/server:${OWNCLOUD_VERSION}
    container_name: owncloud_server
    networks:
      - ipv4_net
    restart: always
    # Forward 8080 port to allow for local access as well. Comment out
    # if you only want access via the reverse proxy
    ports:
      - 8080:8080
    depends_on:
      - mariadb
      - redis
      - reverse-proxy
    environment:
      - OWNCLOUD_DOMAIN=localhost:8080
      - OWNCLOUD_DB_TYPE=mysql
      - OWNCLOUD_DB_NAME=owncloud
      - OWNCLOUD_DB_USERNAME=owncloud
      - OWNCLOUD_DB_PASSWORD=owncloud
      - OWNCLOUD_DB_HOST=mariadb
      - OWNCLOUD_ADMIN_USERNAME=${ADMIN_USERNAME}
      - OWNCLOUD_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - OWNCLOUD_MYSQL_UTF8MB4=true
      - OWNCLOUD_REDIS_ENABLED=true
      - OWNCLOUD_REDIS_HOST=redis
    labels:
      - "traefik.http.routers.owncloud.rule=${OWNCLOUD_TRAEFIK_RULE}"
      - "traefik.http.routers.owncloud.entrypoints=websecure"
      - "traefik.http.routers.owncloud.tls=true"
      - "traefik.http.routers.owncloud.tls.certresolver=le"
      - "traefik.http.routers.owncloudlocal.rule=Host(`owncloud.local`)"
      - "traefik.http.routers.owncloudlocal.local.entrypoints=web"
      - "traefik.enable=true"
    healthcheck:
      test: [ "CMD", "/usr/bin/healthcheck" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - files:/mnt/data
      - backup:/mnt/backup

  mariadb:
    image: mariadb:10.5
    container_name: owncloud_mariadb
    networks:
      - ipv4_net
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=owncloud
      - MYSQL_USER=owncloud
      - MYSQL_PASSWORD=owncloud
      - MYSQL_DATABASE=owncloud
    command:
      [
        "--max-allowed-packet=128M",
        "--innodb-log-file-size=64M"
      ]
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-u",
          "root",
          "--password=owncloud"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mysql:/var/lib/mysql
    labels:
      - "traefik.enable=false"

  redis:
    image: redis:6
    container_name: owncloud_redis
    networks:
      - ipv4_net
    restart: always
    command: [ "--databases", "1" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis:/data
    labels:
      - "traefik.enable=false"

  cron:
    build:
      context: ./
      dockerfile: ./cron/Dockerfile
      args:
        duplicity_password: ${DUPLICITY_PASSWORD}
        duplicity_offsite_dest: ${DUPLICITY_OFFSITE_DEST}
        aws_access_key_id: ${AWS_ACCESS_KEY}
        aws_secret_key: ${AWS_SECRET_KEY}
        cloudflare_email: ${CLOUDFLARE_EMAIL}
        cloudflare_key: ${CLOUDFLARE_KEY}
        cloudflare_domain: ${CLOUDFLARE_DOMAIN}
        cloudflare_subdomains: ${CLOUDFLARE_SUBDOMAINS}
    container_name: cron_container
    networks:
      - ipv4_net
    restart: always
    labels:
      - "traefik.enable=false"
    volumes:
      - backup:/mnt/backup

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    networks:
      - ipv6_net
    ports:
      - "${LOCAL_IPV4}:53:53/tcp"
      - "${LOCAL_IPV4}:53:53/udp"
      - "[${LOCAL_IPV6}]:53:53/tcp"
      - "[${LOCAL_IPV6}]:53:53/udp"
      - "8081:80/tcp"
    environment:
      TZ: 'Europe/Zurich'
      WEBPASSWORD: ${PIHOLE_PASSWORD}
      PIHOLE_DNS_: ${PIHOLE_UPSTREAM_DNS}
      FTLCONF_LOCAL_IPV4: ${LOCAL_IPV4}
      FTLCONF_LOCAL_IPV6: ${LOCAL_IPV6}
      FTLCONF_REFRESH_HOSTNAMES: ALL
      DNSMASQ_LISTENING: all
      REV_SERVER: true
      REV_SERVER_TARGET: ${LOCAL_IPV4_GATEWAY}
      REV_SERVER_CIDR: ${LOCAL_IPV4_SUBNET}
      # Volumes store your data between container upgrades
    volumes:
      - './pihole/etc-pihole:/etc/pihole'
      - './pihole/etc-dnsmasq.d:/etc/dnsmasq.d'
    restart: unless-stopped
    labels:
      - "traefik.enable=false"
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0

  jellyfin:
    build:
      context: ./jellyfin
      dockerfile: Dockerfile
      args:
        host_video_gid: ${HOST_VIDEO_GID}
    container_name: jellyfin
    depends_on:
      - owncloud
    networks:
      - ipv4_net
    ports:
      - 8096:8096
      - 8920:8920 #optional
      - 7359:7359/udp #optional
      - 1900:1900/udp #optional
    environment:
      - TZ=Europe/Zurich
    volumes:
      - jellyfin_config:/config
      - owncloud_webdav:/media
    devices:
      # Specific to RPi4B
      - /dev/video10:/dev/video10
      - /dev/video11:/dev/video11
      - /dev/video12:/dev/video12
      - /dev/video13:/dev/video13
      - /dev/video14:/dev/video14
      - /dev/video15:/dev/video15
      - /dev/video16:/dev/video16
      - /dev/video18:/dev/video18
      - /dev/video19:/dev/video19
      - /dev/video20:/dev/video20
      - /dev/video21:/dev/video21
      - /dev/video22:/dev/video22
      - /dev/video23:/dev/video23
      - /dev/video31:/dev/video31
      - /dev/media0:/dev/media0
      - /dev/media1:/dev/media1
      - /dev/media2:/dev/media2
      - /dev/media3:/dev/media3
    restart: "unless-stopped"
    labels:
      - "traefik.enable=false"
