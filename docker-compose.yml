version: "2.4"

volumes:
  owncloud_files:
    driver: local
    driver_opts:
      type: volume
      device: ${DATA_PATH}/ocis_data
      o: bind
  owncloud_config:
    driver: local
    driver_opts:
      type: volume
      device: ${DATA_PATH}/ocis_config
      o: bind
  jellyfin_config:
    driver: local
    driver_opts:
      type: volume
      device: ${DATA_PATH}/jellyfin_config
      o: bind
  backup:
    driver: local
    driver_opts:
      type: volume
      device: ${LOCAL_BACKUP_PATH}
      o: bind
  owncloud_webdav:
    driver: rclone
    driver_opts:
      type: webdav
      webdav-url: ${WEBDAV_URL}
      webdav-vendor: owncloud
      webdav-user: ${WEBDAV_USER}
      webdav-pass: ${WEBDAV_PASS}
      vfs_cache_mode: writes
      allow_other: 'true'

networks:
  proxy_net:
    enable_ipv6: false
    ipam:
      driver: default
      config:
        - subnet: "172.20.0.0/24"
  ipv4_net:
    enable_ipv6: false
    ipam:
      driver: default
      config:
        - subnet: "172.18.0.0/24"
  ipv6_net:
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: "172.19.0.0/24"
        - subnet: "fd00:dead:beef:1000::/64"

services:
  # This container protects docker.sock from being exposed by allowing only 'get' requests
  # to the '/containers/*' part of the docker.sock API. This restricted version of docker.sock
  # can be accessed via tcp://socket-proxy:2375
  socket-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: socket-proxy
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      CONTAINERS: 1
      IMAGES: 1
    networks:
      - proxy_net
    labels:
      - "traefik.enable=false"

  traefik:
    # The official v2 Traefik docker image
    build:
      context: ./traefik
      dockerfile: Dockerfile
      args:
        traefik_email: ${TRAEFIK_EMAIL}
    container_name: traefik
    networks:
      proxy_net:
      ipv4_net:
        aliases:
          - ${OCIS_DOMAIN:-ocis.owncloud.test}
      ipv6_net:
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - "--configFile=/traefik.toml"
    restart: always
    depends_on:
      - socket-proxy
    ports:
      # The HTTP port
      - "80:80"
      # The HTTPS port
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      #- "8080:8080"
    volumes:
      - ./traefik/acme.json:/acme.json
    labels:
      - "traefik.enable=false"
  
  ocis:
    image: ${OCIS_DOCKER_IMAGE:-owncloud/ocis}:${OCIS_DOCKER_TAG:-latest}
    container_name: ocis
    networks:
      - ipv4_net
    entrypoint:
      - /bin/sh
    # run ocis init to initialize a configuration file with random secrets
    # it will fail on subsequent runs, because the config file already exists
    # therefore we ignore the error and then start the ocis server
    command: ["-c", "ocis init || true; ocis server"]
    environment:
      # enable the notifications service as it is not started automatically
      OCIS_ADD_RUN_SERVICES: "notifications"
      OCIS_URL: https://${OCIS_DOMAIN:-ocis.owncloud.test}
      OCIS_LOG_LEVEL: info
      OCIS_LOG_COLOR: "true"
      OCIS_LOG_PRETTY: "true"
      # do not use SSL between Traefik and oCIS
      PROXY_TLS: "false"
      # make the REVA gateway accessible to the app drivers
      GATEWAY_GRPC_ADDR: 0.0.0.0:9142
      # INSECURE: needed if oCIS / Traefik is using self generated certificates
      OCIS_INSECURE: "false"
      # basic auth (not recommended, but needed for eg. WebDav clients that do not support OpenID Connect)
      PROXY_ENABLE_BASIC_AUTH: "false"
      # admin user password
      IDM_ADMIN_PASSWORD: "${ADMIN_PASSWORD:-admin}" # this overrides the admin password from the configuration file
      # demo users
      IDM_CREATE_DEMO_USERS: "false"
      # email server (if configured)
      NOTIFICATIONS_SMTP_HOST: "${SMTP_HOST}"
      NOTIFICATIONS_SMTP_PORT: "${SMTP_PORT}"
      NOTIFICATIONS_SMTP_SENDER: "${SMTP_SENDER:-oCIS notifications <notifications@${OCIS_DOMAIN:-ocis.owncloud.test}>}"
      NOTIFICATIONS_SMTP_USERNAME: "${SMTP_USERNAME}"
      NOTIFICATIONS_SMTP_INSECURE: "${SMTP_INSECURE}"
      # make the registry available to the app provider containers
      MICRO_REGISTRY_ADDRESS: 127.0.0.1:9233
      NATS_NATS_HOST: 0.0.0.0
      NATS_NATS_PORT: 9233
      PROXY_CSP_CONFIG_FILE_LOCATION: /etc/ocis/csp.yaml
      # these three vars are needed to the csp config file to include the web office apps and the importer
      COLLABORA_DOMAIN: ${COLLABORA_DOMAIN:-collabora.owncloud.test}
      ONLYOFFICE_DOMAIN: ${ONLYOFFICE_DOMAIN:-onlyoffice.owncloud.test}
      COMPANION_DOMAIN: ${COMPANION_DOMAIN:-companion.owncloud.test}
      # enable to allow using the banned passwords list
      OCIS_PASSWORD_POLICY_BANNED_PASSWORDS_LIST: banned-password-list.txt
    volumes:
      - ./ocis/config/ocis/app-registry.yaml:/etc/ocis/app-registry.yaml
      - ./ocis/config/ocis/csp.yaml:/etc/ocis/csp.yaml
      - ./ocis/config/ocis/banned-password-list.txt:/etc/ocis/banned-password-list.txt
      # configure the .env file to use own paths instead of docker internal volumes
      - owncloud_config:/etc/ocis
      - owncloud_files:/var/lib/ocis
      - backup:/mnt/backup
    labels:
      - "traefik.http.routers.ocis.rule=Host(`${OCIS_DOMAIN:-ocis.owncloud.test}`)"
      - "traefik.http.routers.ocis.entrypoints=websecure"
      - "traefik.http.routers.ocis.tls=true"
      - "traefik.http.routers.ocis.tls.certresolver=le"
      - "traefik.http.services.ocis.loadbalancer.server.port=9200"
      - "traefik.enable=true"
    restart: always

  cron:
    build:
      context: ./
      dockerfile: ./cron/Dockerfile
      args:
        duplicity_password: ${DUPLICITY_PASSWORD}
        duplicity_offsite_dest: ${DUPLICITY_OFFSITE_DEST}
        aws_access_key_id: ${AWS_ACCESS_KEY}
        aws_secret_key: ${AWS_SECRET_KEY}
        cloudflare_email: ${CLOUDFLARE_EMAIL}
        cloudflare_key: ${CLOUDFLARE_KEY}
        cloudflare_domain: ${CLOUDFLARE_DOMAIN}
        cloudflare_subdomains: ${CLOUDFLARE_SUBDOMAINS}
    container_name: cron_container
    networks:
      - ipv4_net
    restart: always
    labels:
      - "traefik.enable=false"
    volumes:
      - jellyfin_config:/mnt/jellyfin_config:ro
      - backup:/mnt/backup

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    networks:
      - ipv6_net
    ports:
      - "${LOCAL_IPV4}:53:53/tcp"
      - "${LOCAL_IPV4}:53:53/udp"
      - "[${LOCAL_IPV6}]:53:53/tcp"
      - "[${LOCAL_IPV6}]:53:53/udp"
    environment:
      TZ: 'Europe/Zurich'
      WEBPASSWORD: ${PIHOLE_PASSWORD}
      PIHOLE_DNS_: ${PIHOLE_UPSTREAM_DNS}
      FTLCONF_LOCAL_IPV4: ${LOCAL_IPV4}
      FTLCONF_LOCAL_IPV6: ${LOCAL_IPV6}
      FTLCONF_REFRESH_HOSTNAMES: ALL
      DNSMASQ_LISTENING: all
      REV_SERVER: true
      REV_SERVER_TARGET: ${LOCAL_IPV4_GATEWAY}
      REV_SERVER_CIDR: ${LOCAL_IPV4_SUBNET}
      # Volumes store your data between container upgrades
    volumes:
      - './pihole/etc-pihole:/etc/pihole'
      - './pihole/etc-dnsmasq.d:/etc/dnsmasq.d'
    restart: always
    labels:
      # Redirect pihole.home to pihole.home/admin
      - "traefik.http.middlewares.localpiholeadmin.redirectregex.regex=^(http://)?pihole\\.home/?$$"
      - "traefik.http.middlewares.localpiholeadmin.redirectregex.replacement=$${1}pihole.home/admin"
      - "traefik.http.middlewares.localpiholeadmin.redirectregex.permanent=true"
      - "traefik.http.routers.localpihole.rule=Host(`pihole.home`)"
      - "traefik.http.routers.localpihole.entrypoints=web"
      - "traefik.http.routers.localpihole.middlewares=localpiholeadmin@docker"
      # Port 80 is open inside the container
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
      - "traefik.enable=true"
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0

  jellyfin:
    build:
      context: ./jellyfin
      dockerfile: Dockerfile
      args:
        host_video_gid: ${HOST_VIDEO_GID}
    container_name: jellyfin
    depends_on:
      - ocis
    networks:
      - ipv4_net
    ports:
      - 8920:8920 #optional
      - 7359:7359/udp #optional
      - 1900:1900/udp #optional
    environment:
      - TZ=Europe/Zurich
    volumes:
      - jellyfin_config:/config
      - owncloud_webdav:/media
    devices:
      # Specific to RPi4B
      - /dev/video10:/dev/video10
      - /dev/video11:/dev/video11
      - /dev/video12:/dev/video12
      - /dev/video13:/dev/video13
      - /dev/video14:/dev/video14
      - /dev/video15:/dev/video15
      - /dev/video16:/dev/video16
      - /dev/video18:/dev/video18
      - /dev/video19:/dev/video19
      - /dev/video20:/dev/video20
      - /dev/video21:/dev/video21
      - /dev/video22:/dev/video22
      - /dev/video23:/dev/video23
      - /dev/video31:/dev/video31
      - /dev/media0:/dev/media0
      - /dev/media1:/dev/media1
      - /dev/media2:/dev/media2
      - /dev/media3:/dev/media3
    restart: always
    labels:
      - "traefik.http.routers.localjellyfin.rule=Host(`jellyfin.home`)"
      - "traefik.http.routers.localjellyfin.entrypoints=web"
      # Jellyfin dashboard is running on port 8096
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
      - "traefik.enable=true"

  glances:
    image: nicolargo/glances:alpine-latest-full
    container_name: glances
    networks:
      - ipv4_net
      - proxy_net
    pid: host
    environment:
      - "GLANCES_OPT=-w"
      - DOCKER_HOST=tcp://socket-proxy:2375
    restart: always
    labels:
      - "traefik.http.routers.localglances.rule=Host(`glances.home`)"
      - "traefik.http.routers.localglances.entrypoints=web"
      # Glances port is 61208
      - "traefik.http.services.glances.loadbalancer.server.port=61208"
      - "traefik.enable=true"

  homepage:
    image: ghcr.io/benphelps/homepage:latest
    container_name: homepage
    networks:
      - ipv4_net
      - proxy_net # for docker integrations
    restart: always
    volumes:
      - ./homepage/config:/app/config # Make sure your local config directory exists
    labels:
      - "traefik.http.routers.localhomepage.rule=Host(`welcome.home`)"
      - "traefik.http.routers.localhomepage.entrypoints=web"
      # Homepage port is 3000
      - "traefik.http.services.homepage.loadbalancer.server.port=3000"
      - "traefik.enable=true"

